需求驱动学习
Django开发一个发布会签到系统
开发一个用户登录功能
3.1 写登录
    修改index.html文件,
    index.html
        <html>
            <head>
                <title>Django Page</title>
            </head>
            <body>
                <h1>发布会管理</h1>
                <form>
                    <input name="username" type="text" placeholder="username"><br>
                    <input name="password" type="text" placeholder="password"><br>
                    <button id="btm" type="submint">登录</button>
            </form>
            </body>
        </html>
        注:placeholder 占位符
    启动Django服务,访问:http://127.0.0.1:8000/index/
    目前并不可用.要真正实现登录还需要思考一些问题.
    当输入用户名密码并点击"登录"按钮之后,表单(form)中的数据要以什么方式(GET/POST)提交系统?
    系统如何验证得到的用户名密码?如果验证成功应该跳转到什么页面?如果验证失败如何将错误提示返回给用户?
    3.1.1 GET与POST请求
        当客户机通过HTTP协议向服务器提交请求时,最常用到的方法是GET和POST
        GET - 从指定的资源请求数据
        POST - 向指定的资源提交要被处理的数据

        GET请求
        GET方法如何传参数,给from添加属性method="get"
            修改index.html文件
            ...
                <form method="get">
            ...
        保存index.html文件,重新刷新页面.输入用户名,密码,点击登录
        浏览器URL地址栏显示:
            http://127.0.0.1:8000/index/?username=admin&password=admin123
        GET方法会将用户提交的数据添加到URL地址中,路径后面跟?,username和password为HTML代码中的<input>标签的
        name属性值,username=admin表示用户名输入得到的输入数据为admin.passwrod=admin123密码输入框得到的输入
        数据为"admin123".多个参数之间用&符号隔开

        POST请求
        将上面的get改为post即method="post"
        "CSRF verification failed. Request aborted.""跨站请求伪造"(Cross-Site Request Forgery, CSRF)漏洞
        ,Django针对CSRF的保护措施是在生成的每个表单中放置一个自动生成的令牌,通过这个令牌判断POST请求是否来自
        同一网站
        之前的模板都是纯粹的HTML,在这里要首次使用到Django的模板,使用"模板标签"(template tag)添加CSRF令牌.在
        form表单中添加{% csrf_token %}
            ....
            <form...>
                ...
                {% csrf_token %}
                ...
            </form>
            ...
        此时POST请求.处理username和password参数外,还多了一个csrfmiddlewaretoken字段,该字段的值为当前会话ID
        加上一个秘钥的散列值
        如果想忽略掉该检查,可以在../guest/settings.py文件中注释掉csrf
            settings.py
                #'django.middleware.csrf.CsrfViewMiddleWare'
    3.1.2 处理登录请求
        了解了将表单中的数据提交给服务器的方式(GET/POST),那么将登录数据提交给Django服务器的谁来处理?可以通过
        form表单的action属性来指定提交的路径
        index.html
        ...
            <form method="post" action="/login_action/">
        ...
        打开./guest/urls.py文件添加login_action/的路由
        urls.py
        ....
        from sign import views
        urlpatterns = [
            .....
            url(r'^login_action/$', views.login_action),
        ]
        打开sign/views.py文件,创建login_action视图函数
        views.py
        from django.shortcuts import render
        from django.http import HttpResponse

        ....
        # 登录动作
        def login_action(request):
            if request.method == 'POST':
                username = request.POST.get('username', '')
                password = request.POST.get('password', '')
                if usernmame == 'admin' and password == 'admin123':
                    return HttpResponse('login success!')
                else:
                    return render(request, 'index.html', {'error': 'username or password error!'})
        通过login_action函数来处理登录请求
        客户端发送的请求信息全部包含在request中,Django文档
            https://docs.djangoproject.com/en/1.10/ref/request-response/
        首相,通过request.method方法得到客户发送的请求方式,判断其是否为POST请求类型
        接着,通过request.POST来获取POST请求,通过get()方法来寻找name为"username"和"password"的POST参数,如果参数没有提交
        ,返回一个空的字符串.此处的"username"和"password"对应form表单中的<input>标签的name属性,可见这个属性的重要性
        再接下来,判断POST请求得到的username和password是否为"admin/admin123",如果是则通过HttpResponse类返回"login success!"
        字符串.否则,将通过render返回index.html登录页面,并且顺带返回错误提示的字典{'error':'username or password error!'}
        但是,显然index.html页面上并没有显示错误提示的地方,所以,需要在index.html页面中添加Django模板
        index.html
        .....
            <form method="post" action="/login_action/">
                <input name="username" type="text" placeholder="username" ><br>
                <input name="password" type="text" placeholder="password" ><br>
                {{ error }}<br>
                <button id="btn" type="submit">登录</button>
                {% csrf_token %}
            </form>
        .....
        此处又使用到了Django的模板语言,添加{{ error }},它对应render返回字典中的key,并且在登录失败的页面中显示value
        ,即"username or password error!"信息.

    3.1.3 登录成功页
        登录成功返回的"login success"字符串只是一种临时方案,只是为了方便验证登录的处理逻辑,需要通过HTML页面来替换
        登录之后默认显示发布会列表.
        首先创建../templates/event_manage.html页面
        event_manage.html
        <html>
            <head>
                <title>Event Manage Page</title>
            </head>
            <body>
                <h1>Login Success!</h1>
            </body>
        </html>
        修改../sign/views.py中的login_action函数
        views.py
        from django.shortcuts import render
        from django.http import HttpResponse, HttpResponseRedirect
        ...
        # 登录动作
        ...
            if username == 'admin' and password == 'admin123':
                return HttpResponseRedirect('/event_manage/')
        ...
        # 发布会管理
        def event_manage(request):
            return render(request, "event_manage.html")
        此处用到了新类HttpRequestRedirect,它可以对路径进行重定向,从而将登录成功之后的请求指向/event_manage/目录
        创建event_manage函数,用于返回发布会管理event_manage.html页面
        最后,在,,/guests/urls.py文件中添加路径event_manage/的路由
        urls.py
        .....
        from sign import views

        urlpatterns = [
            ......
            url(r'^event_manage/$', views.event_manage),
            ]

3.2 Cookie和Session
不考虑数据库验证的情况下,加入用户通过"张三"登录,然后,在登录成功页显示"嘿,zhangsan你好!",这是一般系统都会提供的小功能
分别通过Cookie和Session来实现
Cookie与Session
Cookie机制:正统的Cookie分发是通过扩展HTTP协议来实现的,服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应
的Cookie.然而纯粹的客户端脚本如JavaScript或中VBScript也可以生成Cookie.而Cookie的使用是由浏览器按照一定的规则在后台自动发送给
服务器的.浏览器检查所有存储的Cookie,如果某个Cookie所声明的作用范围大于等于将要请求的资源所在的位置,则把该Cookie附在请求资源的HTTP
请求头上发送给服务器
Session机制:Session机制是一种服务器端的机制,服务器使用一种类似与散列表的结构(也可能就是使用散列表)来保存信息
    3.2.1 Cookie的使用
    修改../sign/views.py
    views.py
    ......
    # 登录动作
    def login_action(request):
        if request.method == 'POST':
            username = request.POST.get('username', '')
            password = request.POST.get('password', '')
            if username == 'admin' and password == 'admin123':
                response = HttpResponseRedirect('/event_manage/')
                response.set_cookie('user', username, 3600) # 添加浏览器cookie
                return response
            else:
                return render(request, 'index.html', {'error': 'username or password error !'})
    # 发布会管理
    def event_manage(request):
        username = request.COOKIES.get('user', '') # 读取浏览器cookie
        return render(request, "event_manage.html", {"user": username})
    当用户登录成功后,在跳转到event_manage页面时,通过set_cookie()方法来添加浏览器Cookie.
    set_cookie()方法传了三个参数,第一个参数"user"是用于表示写入浏览器的Cookie名,第二个参数username是由用户在登录页面上输入的
    用户名,第三参数3600用于表示该cookie信息在浏览器中的停留时间,默认以秒为单位.
    而在event_manage视图函数中,通过request.COOKIES来读取Cookie名为"user"的值,并且通过render将event_manage.html页面一起返回给
    客户端浏览器
    修改../templates/event_manage.html页面,添加<div>标签来显示用户登录的用户名,
    event_manage.html
    ....
        <div style="float:right;">
            <a>嘿! {{ user }} 欢迎</a><hr/>
        </div>
    ....


    3.2.2 Session的使用
    Cookie固然好,但存在一定的安全隐患.Cookie像我们以前使用的存折,用户的存钱,取钱都会记录在这张存折上(即浏览器中会保存所以用户信息)
    ,那么对应有非分想法的人可能会去修改存折上的数据(这个比喻忽略掉银行同样会记录用户存取款的金额).
    相对于存折,银行卡要安全的多,客户拿到的只有一个银行卡号(即浏览器只保留一个Sessionid),那么用户的存钱,取钱都会记录在银行的系统里
    (即服务端),只得到一个sessionid是没有任何意义的,所以相对于Cookie来说就会安全很多
    在Django中使用Session和Cookie类似.我们只用将Cookie的几部操作替换成session即可
    修改.../sign/views.py文件,在login_action函数中,将
        response.set_cookie('user', username, 3600)
    替换为:
        request.session['user'] = username # 将session信息记录到浏览器
    在event_manage函数中,将:
        username = request.COOKIES.get('user', '')
    替换为:
        username = request.session.get('user', '') # 读取浏览器session
    此时报错"no such table: django_session",这个错误跟Session的机制有关,既然要服务端记录用户的数据,那么一定要有地方来存放用户
    Session对应的信息才对.所以我们要创建django_session表.
    Django以及准备好这些常用的表,只需要将他们生成即可
    cmd.exe
        python manage.py migrate
    通过"migrate"命令进行数据迁移
    我们并没有配置数据库,Django默认设置sqlite3数据库.打开../settings.py,可查看sqlite3数据库的配置
    另外,在guest项目的根目录下会生成一个db.sqlite3文件.之后讨论

3.3 Django认证系统
    实现了登录,但用户登录信息的验证并未真正实现,目前只是简单的用if语句判断用户名和密码是否为"damin/admin123",我们并没有完整的
    用户数据
    3.3.1 登录Admin后台
    执行
        python manage.py migrate
    使,Django同时也帮我们生成了auth_user表.同时,我们可以通过URL地址:http://127.0.0.1:8000/admin/来访问Django自带的Admin管理
    后台.在此之前,先来创建登录Admin后台的管理员账号
        python manage.py createsuperuser
        # 之后输入用户名,邮箱,密码,重复输入密码
    在后台可新建用户
    3.3.2 引用Django认证登录
    直接使用Django用户体系
    ../sign/views.py文件修改login_action函数
    views.py
    ....
    from django.contrib import auth
    ....
            password = ....
            user = auth.authenticate(username=username, password=password)
            if user is not None:
                auth.login(request, user)  # 登录
    ....
    使用authenticate()函数认证给出的用户名和密码.它接受两个参数,用户名username和密码password,并在用户名密码正确的情况下返回一个
    user对象.如果用户名密码不正确,则authenticate()返回None
    通过if语句判断authenticate()返回如果不为None,说明用户认证通过.那么接下来调用login()函数进行登录.login()函数接受HttpRequest
    对象和一个user对象

    3.3.3 关上窗户
    不通过登录直接访问到登录成功的页面.
        http://127.0.0.1:8000/event_manage/
    可以直接访问到登录后页面,接下来,是用户只能通过登录来访问系统
    views.py
    ....
    from django.contrib.auth.decorators import login_required
    ....
    # 发布会管理
    @login_required
    def event_manage(request):
        username = request.session.get('user', '')
        return render(request, "event_manage.html", {"user":username})
    限制某个视图函数必须登录才能访问,只需要在这个函数前面加上
        @login_required
    即可
    访问被@login_required装饰的视图时,默认会跳转的URL中会包含"/accounts/login/",不仅告诉你窗户是关着的,还指引你去门的位置
    接下来修改../urls.py文件,添加路径
    urls.py
    ....
    from sign import views

    urlpatterns = [
        url(r'^$', views.index),
        url(r'^index/$', views.index),
        url(r'^accounts/login/$', views.index),
        ....
    ]
    当用户访问:
    http://127.0.0.1:8000/
    http://127.0.0.1:8000/index/
    http://127.0.0.1:8000/event_manage/
    默认,都会跳转到登录页面.但是,如果你访问的是其他不存在的路径,比如/abc/,依然会显示page not found的页面,这个时候需要设置默认
    的404页面,在项目部署的章节添加这个页面