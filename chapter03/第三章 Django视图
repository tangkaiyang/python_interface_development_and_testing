需求驱动学习
Django开发一个发布会签到系统
开发一个用户登录功能
3.1 写登录
    修改index.html文件,
    index.html
        <html>
            <head>
                <title>Django Page</title>
            </head>
            <body>
                <h1>发布会管理</h1>
                <form>
                    <input name="username" type="text" placeholder="username"><br>
                    <input name="password" type="text" placeholder="password"><br>
                    <button id="btm" type="submint">登录</button>
            </form>
            </body>
        </html>
        注:placeholder 占位符
    启动Django服务,访问:http://127.0.0.1:8000/index/
    目前并不可用.要真正实现登录还需要思考一些问题.
    当输入用户名密码并点击"登录"按钮之后,表单(form)中的数据要以什么方式(GET/POST)提交系统?
    系统如何验证得到的用户名密码?如果验证成功应该跳转到什么页面?如果验证失败如何将错误提示返回给用户?
    3.1.1 GET与POST请求
        当客户机通过HTTP协议向服务器提交请求时,最常用到的方法是GET和POST
        GET - 从指定的资源请求数据
        POST - 向指定的资源提交要被处理的数据

        GET请求
        GET方法如何传参数,给from添加属性method="get"
            修改index.html文件
            ...
                <form method="get">
            ...
        保存index.html文件,重新刷新页面.输入用户名,密码,点击登录
        浏览器URL地址栏显示:
            http://127.0.0.1:8000/index/?username=admin&password=admin123
        GET方法会将用户提交的数据添加到URL地址中,路径后面跟?,username和password为HTML代码中的<input>标签的
        name属性值,username=admin表示用户名输入得到的输入数据为admin.passwrod=admin123密码输入框得到的输入
        数据为"admin123".多个参数之间用&符号隔开

        POST请求
        将上面的get改为post即method="post"
        "CSRF verification failed. Request aborted.""跨站请求伪造"(Cross-Site Request Forgery, CSRF)漏洞
        ,Django针对CSRF的保护措施是在生成的每个表单中放置一个自动生成的令牌,通过这个令牌判断POST请求是否来自
        同一网站
        之前的模板都是纯粹的HTML,在这里要首次使用到Django的模板,使用"模板标签"(template tag)添加CSRF令牌.在
        form表单中添加{% csrf_token %}
            ....
            <form...>
                ...
                {% csrf_token %}
                ...
            </form>
            ...
        此时POST请求.处理username和password参数外,还多了一个csrfmiddlewaretoken字段,该字段的值为当前会话ID
        加上一个秘钥的散列值
        如果想忽略掉该检查,可以在../guest/settings.py文件中注释掉csrf
            settings.py
                #'django.middleware.csrf.CsrfViewMiddleWare'
    3.1.2 处理登录请求
        了解了将表单中的数据提交给服务器的方式(GET/POST),那么将登录数据提交给Django服务器的谁来处理?可以通过
        form表单的action属性来指定提交的路径
        index.html
        ...
            <form method="post" action="/login_action/">
        ...
        打开./guest/urls.py文件添加login_action/的路由
        urls.py
        ....
        from sign import views
        urlpatterns = [
            .....
            url(r'^login_action/$', views.login_action),
        ]
        打开sign/views.py文件,创建login_action视图函数
        views.py
        from django.shortcuts import render
        from django.http import HttpResponse

        ....
        # 登录动作
        def login_action(request):
            if request.method == 'POST':
                username = request.POST.get('username', '')
                password = request.POST.get('password', '')
                if usernmame == 'admin' and password == 'admin123':
                    return HttpResponse('login success!')
                else:
                    return render(request, 'index.html', {'error': 'username or password error!'})
        通过login_action函数来处理登录请求
        客户端发送的请求信息全部包含在request中,Django文档
            https://docs.djangoproject.com/en/1.10/ref/request-response/
        首相,通过request.method方法得到客户发送的请求方式,判断其是否为POST请求类型
        接着,通过request.POST来获取POST请求,通过get()方法来寻找name为"username"和"password"的POST参数,如果参数没有提交
        ,返回一个空的字符串.此处的"username"和"password"对应form表单中的<input>标签的name属性,可见这个属性的重要性
        再接下来,判断POST请求得到的username和password是否为"admin/admin123",如果是则通过HttpResponse类返回"login success!"
        字符串.否则,将通过render返回index.html登录页面,并且顺带返回错误提示的字典{'error':'username or password error!'}
        但是,显然index.html页面上并没有显示错误提示的地方,所以,需要在index.html页面中添加Django模板
        index.html
        .....
            <form method="post" action="/login_action/">
                <input name="username" type="text" placeholder="username" ><br>
                <input name="password" type="text" placeholder="password" ><br>
                {{ error }}<br>
                <button id="btn" type="submit">登录</button>
                {% csrf_token %}
            </form>
        .....
        此处又使用到了Django的模板语言,添加{{ error }},它对应render返回字典中的key,并且在登录失败的页面中显示value
        ,即"username or password error!"信息.
