重点:Web接口的开发与测试
本章梳理接口相关的概念
7.1 分层的自动化测试
传统的自动化测试:基于产品UI层的自动化测试,是将黑盒功能测试转化为由程序或工具执行的一种自动化测试
分层自动化测试:从黑盒(UI)单层到黑白盒多层的自动化测试体系,从全面黑盒自动化测试到对系统的不同层次进行自动化测试
测试投入比例由少到多                      /  \
            UI界面层                    / UI \  UI自动化测试,JS自动化测试
                                       /      \
            业务逻辑层                 / Service\集成接口测试,web接口测试
            数据处理层                /   Unit   \模块/单元测试,Code Review
python+selenium为WebUI层自动化测试的应用
本书同样遵循分层自动化测试的思想,将自动化测试技术延伸到Service层,关注Web接口的开发与自动化测试

7.2 单元测试与模块测试
单元测试:
1.单元测试是应用程序最小可测部分
2.在面向过程编程中,单元也可以是整个模块,但常见的是单个函数或过程
3.在面向对象编程中,单元通常是整个接口,例如类,但可以是单独的方法
4.单元测试多数情况下是由程序员自己负责的
模块测试:
1.模块测试与单元测试有细微的区别
2.模块测试是针对具有明显的功能特征的代码块进行的测试
3.并且,它任务单元测试可能只涉及测试一小部分的功能
4.模块测试多数情况下是由其他程序员或测试人员进行.
单元测试更强调的是程序的最小可测单元;而且米卡测试更强调所测试程序的功能完整性
模块接口测试:没有规范的概念,就是模块测试,更强调了被测试的模块有规范的输入和输出.因为这是一个可测试的模块
最显著的特征之一

7.3 接口测试
接口:程序接口;协议接口
程序接口:程序模块接口,具体到程序中一般就是提供了输入输出的类,方法或函数.对应程序接口的测试,一般需要使用与开发程序接口
相同的编程语言,通过不同的传入参数,来验证程序接口的功能.
协议接口:一般指系统通过不同的协议来提供的接口,例如HTTP/SOAP协议等.这种类型接口对底层代码做了封装,通过协议的
方式对外提供调用.因为不涉及到程序层面,所以,不受编程语言的限制:我们可以通过其他编程语言或工具对其进行测试
    7.3.1 接口的分类
    接口大体分为以下三类:
        系统与系统之间的接口:系统A<====>系统B
        下层服务对上层服务的接口:XX系统:应用层<==>Service<==>DB
            应用层,可以看成是系统所提供的UI层功能,对于Web系统,可以认为浏览器页面上所提供的功能,登录,注册,查询,删除等
            Service层,可以理解为服务器所提供数据和逻辑的处理
            DB层:(Data Base)数据库主要用来存放数据,例如用户的个人信息,商品的信息等
            访问对象,它是一个面向对象的数据库访问接口
            例:首先是Service提供了一个查询接口,这个接口需要一个参数(查询的关键字):然后应用层提供了一个输入框,需要用户输入
            查询关键字,并且还提供了一个查询按钮用于提交查询的关键字.当用户输入查询关键字并点击提交按钮后,相当于调用的查询
            接口,查询接口需要对用户提交的关键字做出相应的判断,是否为空?然后,通过DAO层调用数据库,根据关键字查询表中的数据,
            最后,再讲拿到的数据返回给应用层,应用层负责将数据展示到Web页面上
            在这个过程中,各层之间的交互就是通过接口,应用层与Service主要通过HTTP接口.Service层与DB层主要通过DAO
            (Data Access Object)数据库访问接口,对应python与MySQL之间的调用,PyMySQL驱动就扮演这样的角色
        系统内,服务与服务之间的调用:XX系统:Service<==>Service<==>Service
            系统内部,服务与服务之间的调用,大多数情况下是程序之间的调用
            例:假设系统开发一个用户查询接口,输入用户名,返回用户信息(性别,年龄,手机号,邮箱地址等),如果用户
            不存在则返回null;现在需要新开发一个用户抽奖的接口,该接口需要用户名和抽奖id,抽奖接口得到用户名后可以
            调用用户查询接口,如果用户查询接口返回null,那么抽奖接口就可以直接返回用户不存在了.在这个例子中,用户
            抽奖接口就是调用的用户查询接口
            这里的用户查询接口和抽奖接口本质上就是程序开发的函数或类方法,提供入参和返回值

    7.3.2 接口测试的意义
        更早的发现问题
        缩短产品研发周期
        发现更底层的问题
        检查服务器的异常处理能力


7.4 编程语言中的Interface
    7.4.1 Java中的Interface
    在Java中定义接口使用interface关键字来声明,可以看做是一种特殊的抽象类,可以指定一个类必须做什么,而不是规定
    它如何去做
    注意:这里的测试,并不是测试的接口,因为接口本身只是抽象的定义,并没有可测试性,这里真正所测试的是继承了接口
    的类,或者叫已经实例化的对象
    7.4.2 Python中的Zope.interface
    python本身并不提供Interface的创建和使用,但是我们可以通过第三方扩展库来使用类似Interface的概念,这里选用
    Zope.interface库
    可以使用pip安装:pip install zope.interface

    例:
    demo.py
    class Host(object):
        def goodmoring(self, name):
            """Say good morning to guests"""
            return "Good morning, %s!" % name

    if __name__ == '__main__':
        h = Host()
        hi = h.goodmorning('zhangsan')
        print(hi)
    使用Interface
    interface_demo.py
    from zope.interface import Interface
    from zope.interface.declarations import implementer
    # 定义接口
    class Host(Interface):
        def goodmorning(self, host):
            """Say good morning to host"""

    @implementer(IHost) # 继承接口
    class Host:
        def goodmorning(self, guest):
            """Say good morning to guest"""
            return "Good morning, %s!" % guest
    if __name__ == '__main__':
        p = Host()
        hi = p.goodmorning('Tom')
        print(hi)
区别interface与之前介绍的接口概念