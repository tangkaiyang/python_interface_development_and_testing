前后端分离:
1.后端可以不用必须精通前端技术(HTML/JavaScript/CSS),只专注于数据的处理,对外提供API接口.
2.前端的专业性越来越高,通过API接口获取数据,从而专注于页面的设计
3.前后端分离增加接口的应用范围,开发的接口可以应用到Web页面上,也可以应用到移动APP上

8.1 HTTP协议域JSON
    8.1.1 HTTP协议
    超文本传输协议(HTTP,HyperTextTransfer Protocol)是互联网上应用最为广泛的一种网络协议
    HTTP协议主要特点:
        1.支持客户/服务器模式
        简单快速:客户向服务器请求服务时,只需传送请求方法和路径.请求方法常用的有GET,POST.每种方法规定了客户
        与服务器联系的类型不同.由于HTTP协议简单,使得HTTP服务器的程序规模小,因为通信速度很快.
        2.灵活:HTTP允许传输任意类型的数据对象.正在传输的类型由Content-Type加以标记
        3.无连接:无连接的含义是限制每次连接只处理一个请求.服务器处理完客户的请求,并收到客户的应答后,即断开
        连接.采用这种方式可以节省传输时间
        4.无状态:HTTP协议是无状态协议.无状态是指协议对于事务处理没有记忆能力.缺少状态意味着如果后续处理需要
        前面的信息,则它必须重传,这样可能导致每次连接传送的数据量增大.另一方面,在服务器不需要先前信息时它的应
        答比较快.
    HTTP请求类型:
        请求行以一个方法符号开头,以空格分开,后面跟着请求的URI和协议的版本,格式如下:
            Method Request-URI HTTP-Version CRLF
        其中,Method表示请求方法;Request-URI是一个统一资源标识符;HTTP-Version表示请求的HTTP协议版本;CRLF表示
        回车和换行(除了作为结尾的CRLF外,不允许出现单独的CR或LF字符)

        请求方法(所有方法全为大写)
        请求方法            说明
        GET                 请求获取Request-URI所标识的资源
        POST                在Request-URI所标识的资源后附加新的数据
        HEAD                请求获取有Request-URI所标识的资源的相应消息报头
        PUT                 请求服务器存储一个资源,并用Request-URI作为其标识
        DELETE              请求服务器删除Request-URI所标识的资源
        TRACE               请求服务器回送收到的请求信息,主要用于测试或诊断
        CONNECT             保留将来使用
        OPTIONS             请求查询服务器的性能,或者查询与资源相关的选项和需求

    响应状态码:
    状态代码由三位数字组成,第一个数字定义了响应的类型,且有五种可能值:
    1xx:指示信息--表示请求已接收,继续处理
    2xx:成功-表示请求已被成功接收,理解,接受
    3xx:重定向--要完成请求必须进行更进一步的操作
    4xx:客户端错误--请求有语法错误或请求无法实现
    5xx:服务器端错误--服务器未能实现合法的请求

    常见状态码,状态说明:
    200 OK              //客户端请求成功
    400 Bad Request     //客户端请求有语法错误,不能被服务器所理解
    401 Unauthorized    //请求未经授权,这个状态代码必须和WWW-Authenticate报头域一起使用
    403 Forbidden       //服务器收到请求,但是拒绝提供服务
    404 Not Found       //请求资源不存在,eg:输入了错误的URL
    500 Internal Server Error   //服务器发生不可预期的错误
    503 Server Unavailable      //服务器当前不能处理客户端的请求,一段时间后可能恢复正常

    请求头信息与响应头信息
        头信息
        响应头信息
            Content-Type text/html; charset=utf-8
                    Date Sat, 20 Feb 2016 14:34:41 GMT
                  Server WSGIServer/0.2 CPython/3.5.0
         X-Frame-Options SAMEORIGIN
         请求头信息
                  Accept text/html, application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
         Accept-Encoding gzip, deflate
         Accept-Language zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3
              Connection keep-alive
                    Host 127.0.0.1:8000
              User-Agent Mozilla/5.0 (Windows NT 6.3: WOW64: rv:29.0) Gecko/20100101 Firefox/29.0
    1.请求头信息
    请求报头允许客户端向服务端传递请求的附加信息以及客户端自身的信息
    常用的请求报头:
    Accept:请求报头域用于指定客户端接受哪些类型的信息.eg:Accept:image/gif,表明客户端希望接受GIF图像格式
    的资源;Accept:text/html,表明客户端希望接受html文本
    Accept-Encoding:请求报头域类似于Accept,但是它用于指向可接受的内容编码
    Accept-Language:请求报头域类似于Accept,但是它是用于指定一种自然语言
    Connection:允许发送指定连接的选项.例如指定连接是连续,或中指定"close"选项,通知服务器,在响应完成后,关闭
    连接.从HTTP/1.1起,默认都开启了Keep-Alive,保持连接特性
    Host(发送请求时,该报头域是必须的),Host请求报头域主要用于指定被请求资源的Internet主机和端口号,它通常从
    HTTP URL中提取出来
    User-Agent:请求报头域允许客户端将它的操作系统,浏览器和其他属性告诉服务器.不过,这个报头域不是必需的
    ,如果我们自己编写一个浏览器,不使用User-Agent请求报头域,那么服务器就无法得知我们的信息了.
    2.响应头信息
    响应报头允许服务器传递不能放在状态行中的附件响应信息,以及关于服务器的信息和对Request-URI所标识的资源
    进行下一步访问的信息
    常用的响应报头
    Location:响应报头域用于重定向接受者到一个新的位置.Location响应报头域常用在更换域名的时候
    Server:响应报头域包含了服务器用来处理请求的软件信息.与User-Agent请求报头域是相对应的
    WWW-Authenticate:响应报头域必须被包含在401(未授权的)响应信息中,客户端收到401响应消息的时候,并发送
    Authorization报头域请求服务器对其进行验证时,服务端响应报头就包含该报头域
    X-Frame-Options:有三个值:DENY表示该页面不允许在frame中展示,即便是在相同域名的页面中嵌套也不允许.
    SAMEORIGIN表示该页面可以在相同域名页面的frame中展示.ALLOW-FROM uri表示该页面可以在指定来源的frame中
    展示

    8.1.2 JSON
    什么是JSON?
    JSON是指JavaScript对象表示法(JavaScript Object Notation)
    JSON是轻量级的文本数据交换格式
    JSON独立于语言(JSON使用JavaScript语法来描述数据对象,但是JSON仍然独立与语言和平台.JSON解析器和JSON库支持不同的编程语言)
    JSON具有自我描述性,更易理解

    JSON数据格式
    {
        "employees": [
        {"firstName":"Bill", "lastName":"Gates"},
        {"firstName":"George", "lastName":"Bush"},
        {"firstName":"Thomas", "lastName":"Carter"},
        ]
    }
    JSON语法是JavaScript对象表示法语法的子集.
        数据在名称/值对中
        数据由逗号分隔
        花括号保存对象
        方括号保存数组


8.2 什么是Web接口?
    服务器返回的资源包括HTML,CSS和JavaScript,除此之外,服务器还返回图片,视频,字体和插件等类型的资源
    虽然这些资源的传输使用的是HTTP协议,但我们不能将其看作为Web接口.然而接口关心的只有数据,它的输入和
    输出是具有一定格式的资源,接口并不关心数据展示在哪里,要以什么样式去展示.而HTML,CSS和JavaScript等
    关心的是数据展示在哪里,如何展示.
    接口并不是直接给普通用户来使用的.它一般为其他开发者提供调用.后端与前端开发之间,不同系统的开发之间,
    以及不同公司的开发之间的调用.至于调用接口数据的开发者如何使用这些数据,对于接口开发者来说并不需要
    关心

8.3 开发系统的Web接口
针对发布会签到系统来开发Web接口
    8.3.1 发布会添加接口
    首先,单独创建../sign/views_if.py文件,开发添加发布会接口
    views_if.py
    from django.http import JsonResponse
    from sign.models import Event
    from django.core.exceptions import ValidationError
    # 添加发布会接口
    def add_event(request):
        eid = request.POST.get('eid', '')           # 发布会id
        name = request.POST.get('name', '')         # 发布会标题
        limit = request.POST.get('limit', '')       # 限制人数
        status = request.POST.get('status', '')     # 状态
        address = request.POST.get('address', '')   # 地址
        start_time = request.POST.get('start_time', '') # 发布会时间

        if eid == '' or name == '' or limit == '' or address == '' or start_time == '':
            return JsonResponse({'status':10021, 'message':'parameter error'})
        result = Event.objects.filter(id = eid)
        if result:
            return JsonResponse({'status': 10022, 'message':'event id already exists'})
        result = Event.objects.filter(name = name)
        if result:
            return JsonResponse({'status':10023, 'message': 'event name already exists'})
        if status == '':
            status = 1
        try:
            Event.objects.create(id=eid, name=name, limit=limit, address=address, status=int(status)
                                ,start_time=start_time)
        except ValidationError as e:
            error = 'start_time format error. It must be in YYYY-MM-DD HH:MM:SS format.'
            return JsonResponse({'status': 200, 'message':'add event success'})
    通过POST请求接收发布会参数:发布会id,标题,人数,状态,地址和时间等参数.
    首先,判断eid,name,limit,address,start_time等字段均不能为空,否则JsonResponse()返回响应的状态码和提示.
    JsonResponse()是一个非常有用的方法,它可以直接将字典转化为Json格式返回到客户端
    接下来,判断发布会id是否存在,以及发布会名称(name)是否存在;如果存在将返回相应的状态码和提示信息.
    再接下来,判断发布会状态是否为空,如果为空,将状态设置为1(True)
    最后,将数据插入到Event表,在插入的过程中如果日期格式错误,将抛出ValidationError异常,接收该异常
    并返回相应的状态码和提示,否则,插入成功,返回状态码200和"add event success"的提示

    8.3.2 发布会查询接口
    打开.../sign/views_if.py文件,添加发布会查询接口
    views_if.py
    ....
    from django.core.exceptions import ValidationError, ObjectDoesNotExist
    ...
    # 发布会查询
    def get_event_list(request):
        eid = request.GET.get("eid", "")        # 发布会id
        name = reuqest.GET.get("name", "")      # 发布会名称
        if eid == '' and name == '':
            return JsonResponse({'status': 10021, 'message':'parameter error'})
        if eid != '':
            event = {}
            try:
                result = Event.objects.get(id= eid)
            except ObjectDoesNotExist:
                return JsonResponse({'status': 10022, 'message': 'query result is empty'})
            else:
                event['name'] = result.name
                event['limit'] = result.limit
                event['status'] = result.status
                event['address'] = result.address
                event['start_time'] = result.start_time
                return JsonResponse({'status':200, 'message':'success', 'data': event})
        if name != '':
            datas = []
            results = Event.objects.filter(name__contains = name)
            if results:
                for r in results:
                    event = {}
                    event['name'] = r.name
                    event['limit'] = r.limit
                    event['status'] = r.status
                    event['address'] = r.address
                    event['start_time'] = r.start_time
                    datas.append(event)
                return JsonResponse({'status': 200, 'message':'success', 'data':datas})
            else:
                return JsonResponse({'status': 200, 'message':'query result is empty'})
    通过GET请求接收发布会id和name参数.两个参数都是可选的.首先,判断两个参数同时为空,接口返回状态码10021,
    参数错误.
    如果发布会id不为空,优先通过id查询,因为id的唯一性,所以,查询结果只会有一条,将查询结果以key:value
    对的方式存放到定义的event字典中,并将数据字典作为整个返回字典中data对应的值返回.
    name查询为模糊查询,查询数据可能会有多条,返回的数据稍显复杂;首先将查询的每一条数据放到一个字典event中,
    再把每一个字典再放到数组datas中,最后将整个数组作为返回字典中data对应的值返回

    8.3.3 嘉宾添加接口
    打开.../sign/views_if.py文件,添加嘉宾添加接口
    views_if.py
    ....
    from sign.models import Event, Guest
    from django.db.utils import IntegrityError
    import time
    ...
    # 添加嘉宾接口
    def add_guest(request):
        eid = request.POST.get('eid', '')           # 关联发布会id
        realname = request.POST.get('realname', '') # 姓名
        phone = request.POST.get('phone', '')       # 手机号
        email = request.POST.get('email', '')       # 邮箱
        if eid == '' or realname == '' or phone == '':
            return JsonResponse({'status': 10021, 'message': 'parameter error'})
        result = Event.objects.filter(id=eid)
        if not result:
            return JsonResponse({'status': 10022, 'message':'event id null'})
        result = Event.objects.get(id=eid).status
        if not result:
            return JsonResponse({'status': 10023, 'message': 'event status is not available'})
        event_limit = Event.objects.get(id=eid).limit       # 发布会限制人数
        guest_limit = Guest.objects.filter(event_id=eid)    # 发布会已添加的嘉宾人数

        if len(guest_limit) >= event_limit:
            return JsonResponse({'status': 10024, 'message': 'event number is full'})
        event_time = Event.objects.get(id=eid).start_time   # 发布会时间
        etime = str(event_time).split(".")[0]


