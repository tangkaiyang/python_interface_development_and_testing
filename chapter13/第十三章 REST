REST同样属于WebService技术.REST定义了一组体系架构原则,您可以根据这些原则设计以系统资源为中心的
Web服务,包括使用不同语言编写的客户端如何通过HTTP处理和传输资源状态.如果考虑使用它的Web服务的数量,
REST近年来以及称为最主要的Web服务设计模型.事实上,REST对Web的影响非常大,由于使用相当方便,已经普遍
取代了基于SOAP和WSDL的接口设计
13.1 RPC与REST
RPC
RPC即Remote Procedure Call的缩写,远程过程调用.它是WebService领域广为流行的一种开发风格.
RPC风格的开发关注与服务器/客户端之间的方法调用,而并不关注基于哪个网络层的那种协议.RPC风格的代表
是XML-RPC和大Web服务
(1)XML-RPC
XML-RPC是一种使用XML格式封装方法调用,并使用HTTP协议作为传送机制的RPC风格的实现.
XML-RPC的请求方法都是HTTP协议的POST方法,请求和响应的数据格式均为XML
XML-RPC是一种遗留技术,以及被SOAP取代.著名的测试用例管理系统TestLink的对外接口就是使用PHP开发的
XML-RPC
(2)大Web服务
大Web服务(Big Web Service)是对基于SOAP+WSDL+UDDI等技术实现RPC风格的大型Web服务的统称.十二章

REST
REST(即Representational State Transfer的缩写)翻译为"表现层状态转化"
REST具有跨语言,跨平台的特点,所以,它是一种遵循REST式风格的WeService
如果一个架构符号REST原则,就称他为RESTful架构.
一.资源(Resources)
REST的名称"表现层状态转化"中,省略了主语."表现层"其实指的是"资源"(Resources)的"表现层".
所谓资源,就是网络上的一个实体,或者说是网络上的一个具体信息.他可以是一段文本,一张图片,一首歌曲,
一种服务,总之就是一个具体的存在.你就可以用一个URI(统一资源定位符)指向他,每种资源对应一个特定的
URI.要获取这个资源,访问它的URI就可以,因为URI就成了每一个资源的地址或独一无二的识别符
所谓"上网",就是与互联网上一些列的"资源"互动,调用它的URI
二,表现层(Representation)
"资源"是一种信息实体,他可以有多种外在表现形式.我们把资源具体呈现出来的形式,叫做它的"表现层"(Representation)
比如,文本可以用txt格式表现,也可以用HTML格式,XML格式,JSON格式表现,甚至采用二进制格式;图片可以用JPG
格式表现,也可以用PNG格式表现
URI只代表资源的实体,不代表它的形式.严格地说,有些网址最后的".html"后缀名是不必要的,因为这个后缀名
表示格式,属于"表现层"的范畴,而URI应该只代表"资源"的位置.它的具体表现形式,应该在HTTP请求的头部信息
中用Accept和Content-Type字段指定,这两个字段才是对"表现层"的描述
三,状态转化(State Transfer)
访问一个网站,就代表了客户端和服务器的一个互动过程.在这个过程中,势必涉及到数据和状态的变化
互联网通信协议HTTP协议,是一个无状态协议.这意味着,所有的状态都保存在服务器端.因此,如果客户端想要
操作服务器,必须通过某种手段,让服务器端发生"状态转化"(State Transfer).而这种转化是建立在表现层之上
的,所以就是"表现层状态转化"
客户端用到的手段,只能是HTTP协议.具体来说,就是HTTP协议里面,四个表示操作方式的动词:GET,POST,PUT,
DELETE.他们分别对应四种基本操作:GET用来获取资源,POST用来新建资源(也可以用于更新资源),PUT
用来更新资源,DELETE用来删除资源
什么是RESTful架构
(1)每一个URI代表一种资源
(2)客户端和服务器之间,传递这种资源的某种表现层
(3)客户端通过四个HTTP动词,对服务器资源进行操作,实现"表现层状态转化"
13.2 Django-REST-Framework
Django-REST-Framework是一个强大而灵活的工具用于构建Web APIs.通过该框架可以创建REST风格的
WebService应用
pip安装pip install djangorestframework

    13.2.1 创建简单的API
    与django基本一致
    创建项目和应用:
    django-admin startproject django_rest
    cd django_rest
    python manage.py startapp api
    打开settings.py文件添加应用
    执行数据库迁移
    python manage.py migrate
    创建超级管理员账户
    python manage.py createsuperuser
    序列化
    创建数据库序列化,创建../api/serializers.py文件
    创建视图:
    ../api/views.py视图文件,编写代码
    URLS
    打开../django_rest/urls.py,添加路径的路由
    启动服务
    python manage.py runserver